/*
    Gradle PyPi publisher extension

    Created: 23rd April, 2021
    License: MIT - Please refer to <https://opensource.org/licenses/MIT>
    Copyright·(c)·2024,·HSPyLib
*/

import groovy.json.JsonSlurper
import java.io.ByteArrayOutputStream

/* Helper Functions -------------------------------------------------------- */

Collection dirsByPattern(String baseDir, String pattern) {
  def paths = []
  fileTree(baseDir).visit { FileVisitDetails details ->
      if (details.isDirectory() && details.name ==~ pattern) paths << details.file.path
  }
  return paths
}

String dirName(File file) {
  file.getParentFile().getPath()
}

/* Tasks ------------------------------------------------------------------- */

/* Cleanup distribution files from buildDir */
task cleanDist(type: Task) {
  group = 'Build'
  description = "Cleanup distribution files from buildDir and sourceRoot"
  doLast {
    println("Cleanup distribution files from buildDir and sourceRoot")
    delete dirsByPattern("$buildDir", /.*dist$/)
    delete dirsByPattern("$buildDir", /.*build$/)
    delete dirsByPattern("$buildDir", /.*\.egg-info$/)
    delete dirsByPattern("$sourceRoot", /.*dist$/)
    delete dirsByPattern("$sourceRoot", /.*build$/)
    delete dirsByPattern("$sourceRoot", /.*\.egg-info$/)
  }
}

/* Copy LICENSE and README files into main folder */
task copyLicenseAndReadme(type: Copy) {
  group = 'Publish'
  description = "Copy LICENSE file into main folder"
  from(rootDir) {
    include 'LICENSE*'
    include 'README*'
  }
  into "${sourceRoot}/main"
}

/* Check files created in dist folder */
task checkDist(type: Task) {
  group = 'Publish'
  description = 'Check files created in dist folder'
  doLast {
    fileTree(sourceRoot).matching {
        include "**/setup.py"
      }.each { File module ->
        def distDir = "${buildDir}/dist"
        println("Checking distribution files -> ${buildDir}")
        exec {
          workingDir buildDir
          commandLine project.python, '-m', 'twine', 'check', "${distDir}/*"
        }
    }
  }
}

/* Generate PyPi distribution files */
task sdist(type: Task) {
  group = 'Publish'
  description = 'Generate PyPi distribution files'
  dependsOn cleanDist
  dependsOn copyLicenseAndReadme
  dependsOn syncRequirements
  finalizedBy checkDist
  doLast {
    def distDir = "${buildDir}/dist"
    fileTree("$sourceRoot").matching {
        include "**/setup.py"
      }.each { File module ->
        def moduleDir = dirName(module)
        println("Generating distribution for '${moduleDir}' => ${distDir}")
        exec {
          workingDir "${moduleDir}"
          commandLine project.python, "-m", "build", "-o", distDir, "--sdist"
        }
        exec {
          workingDir "${moduleDir}"
          commandLine project.python, "-m", "build", "-o", distDir, "--wheel"
        }
      }
  }
}

/* Publish a new AskAI version */
task publish(type: Task) {
  group = 'Publish'
  description = "Publish the module to PyPi repository"
  if (!project.hasProperty('no-patch') || !Boolean.valueOf(project.getProperty('no-patch'))) {
    dependsOn patchVersion
  }
  doLast {
    def out = new ByteArrayOutputStream()
    def version = new File("${versionFile}").text
    println "Publishing HomeSetup v${version} ..."
    exec {
      commandLine 'git', 'log', '--pretty=format:%s', 'origin/master..HEAD'
      standardOutput = out
    }
    def tag = "v${project.ext.app_version}"
    def commit_logs = out.toString()
    def prefix = commit_logs?.trim() ? commit_logs?.split('\n').size() + ' commits' : ' No commits'
    def commitMsg = "New ${project.app_name} revision: '${tag}' >> ${prefix}"
    println("Publishing ${project.app_name}...")
    println("Revision commits: ${commitMsg}  Tag: ${tag}")
    exec {
      commandLine 'git', 'tag', '-a', "${tag}", '-m', "New ${project.app_name} revision ${tag}"
    }
    exec {
      commandLine 'git', 'push', 'origin', "${tag}"
    }
    exec {
      commandLine 'git', 'add', '-A', ':/'
    }
    exec {
      commandLine 'git', 'commit', '-m', "${commitMsg}"
    }
    exec {
      commandLine 'git', 'push', 'origin', 'HEAD'
    }
  }
}

/* Show PyPi module details */
task pypiShow(type: Task) {
  group = 'Publish'
  description = "Show PyPi module details"
  doLast {
    def tempDir = System.getenv("TEMP") ?: '/tmp'
    def url = project.ext.pypiModuleUrl + "/${app_name}/json"
    def outFile = "${tempDir}/${app_name}-info.json"
    println("PyPi Instance: " + url)
    exec {
      commandLine 'curl', '-s', '-o', outFile, url
    }
    def json = new JsonSlurper().parseText(new File(outFile).getText())
    println("\n--------------------------------------------------------------------------------")
    println("|-AppName: ${json.info.package_url}")
    println("|-Summary: ${json.info.summary}")
    println("|-Version: ${json.info.version}")
    println("|-License: ${json.info.license}")
    println("|-Python: ${json.info.requires_python}")
    println("|-Keywords: \n  ${json.info.keywords ? '#' + json.info.keywords.split(',').join(' #') : 'None'}")
    println("|-Classifiers: \n  ${json.info.classifiers ? '|-' + json.info.classifiers.join('\n  |-') : 'None'}")
    println("|-Dependencies: \n  ${json.info.requires_dist ? '|-' + json.info.requires_dist.join('\n  |-') : 'None'} ")
    println("--------------------------------------------------------------------------------")
  }
}
